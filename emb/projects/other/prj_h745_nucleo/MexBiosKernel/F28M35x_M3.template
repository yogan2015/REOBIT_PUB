/*
//###########################################################################
// FILE:    F28M35x_generic_M3_FLASH.cmd
// TITLE:   Linker Command File for F28M35x examples that run out of FLASH
//###########################################################################
// $TI Release: F28M35x Support Library v200 $
// $Release Date: Wed Apr 17 14:44:24 CDT 2013 $
//###########################################################################
*/

--retain=g_pfnVectors

/* The following command line options are set as part of the CCS project.    */
/* If you are building using the command line, or for some reason want to    */
/* define them here, you can uncomment and modify these lines as needed.     */
/* If you are using CCS for building, it is probably better to make any such */
/* modifications in your CCS project and leave this file alone.              */
/*                                                                           */
/* --heap_size=0                                                             */
/* --stack_size=256                                                          */
/* --library=rtsv7M3_T_le_eabi.lib                                           */


/* The following options allow the user to program Z1 and Z2 DCSM security   */
/* values, include CSM PSWD, ECSL PSWD, GRABSECT, GRABRAM, and FLASH EXEONLY */
/* The driverlib/dcsm_z1_secvalues.s and driverlib/dcsm_z2_secvalues.s files */
/* must be included in the Flash project for the below 2 lines to take       */
/* effect.                                                                   */
--retain=dcsm_z1_secvalues.obj(.z1secvalues,.z1_csm_rsvd)
--retain=dcsm_z2_secvalues.obj(.z2secvalues,.z2_csm_rsvd)

/* System memory map */

MEMORY
{
/* FLASH */
    CSM_ECSL_Z1     : origin = 0x00200000, length = 0x0024
    CSM_RSVD_Z1     : origin = 0x00200024, length = 0x000C
    RESETISR (RX)   : origin = 0x00200030, length = 0x0008   /* Reset ISR is mapped to boot to Flash location */
    INTVECS (RX)    : origin = 0x00200200, length = 0x01B0
	MBSP0           : origin = ##MBS_PROG_ADDR##, length = ##MBS_PROG_SIZE##
	MBSP1           : origin = ##MBS_CFG_ADDR##, length = ##MBS_CFG_SIZE##
	FLASH           : origin = ##SPJ_PROG_ADDR##, length = ##SPJ_PROG_SIZE##
    CSM_RSVD_Z2     : origin = 0x0027FF00, length = 0x00DC
    CSM_ECSL_Z2     : origin = 0x0027FFDC, length = 0x0024
/* RAM */
	MBSD0		    : origin = ##MBS_DATA_ADDR##, length = ##MBS_DATA_SIZE##
	RAMC		    : origin = ##SPJ_DATA_ADDR##, length = ##SPJ_DATA_SIZE##
	VTABLE			: origin = 0x20000000, length = 0x0258
    BOOT_RSVD (RX)  : origin = 0x20004000, length = 0x0900
/* Message RAM */
    CTOMRAM (RX)    : origin = 0x2007F000, length = 0x0800
    MTOCRAM (RWX)   : origin = 0x2007F800, length = 0x0800
}

/* Section allocation in memory */

SECTIONS
{
    MBS_CODE		:   > MBSP0
	MBS_CFG         :   > MBSP1
	MBS_DATA		:   > MBSD0
	
	.intvecs		:   > INTVECS
    .resetisr		:   > RESETISR
    .text   		:   > FLASH
    .const  		:   > FLASH
    .cinit  		:   > FLASH
    .pinit  		:   > FLASH

    .vtable 		:   > VTABLE
    .data   		:   > RAMC
    .bss    		:   > RAMC
    .sysmem 		:   > RAMC
    .stack  		:   > RAMC
    
    .z1secvalues	:   >  CSM_ECSL_Z1
    .z1_csm_rsvd	:   >  CSM_RSVD_Z1
    .z2secvalues	:   >  CSM_ECSL_Z2
    .z2_csm_rsvd	:   >  CSM_RSVD_Z2

    
    GROUP : > MTOCRAM
    {
        PUTBUFFER  
        PUTWRITEIDX
        GETREADIDX  
    }

     GROUP : > CTOMRAM 
    {
        GETBUFFER   : TYPE = DSECT
        GETWRITEIDX : TYPE = DSECT
        PUTREADIDX  : TYPE = DSECT
    }    
}







 
#ifdef __BORLANDC__
#define _FUNC_CALL_  __stdcall
#else
#ifndef _FUNC_CALL_
#define _FUNC_CALL_  
#endif
#endif
 
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <float.h>
#include "IQmathLib.h"
#include "chip.h"
 
#include "kernel.h"
extern struct MBS_KERNEL Kernel;
#define MBS_getData(Addr)                      MBS_getGlobalData(&Kernel, Addr)
#define MBS_setData(Addr, Data, Flag)          MBS_setGlobalData(&Kernel, Addr, Data, Flag)
#define MBS_getPjtData(Addr, Len)              MBS_getProjectData(&Kernel, Addr, Len)
#define MBS_setPjtData(Addr, Data, Flag, Len)  MBS_setProjectData(&Kernel, Addr, Data, Flag, Len)
#define MBS_getMemSt()                         MBS_getMemStatus(&Kernel)
 
extern float SimulationTime;
 
#ifndef M_PI
#define M_PI    3.14159265358979323846
#endif
 
typedef struct _N_Phase_symmetry_cos_STR {
  float  *Phase;
  float  *k;
  float   Phase_A;
  float   Phase_B;
  float   Phase_C;
} N_Phase_symmetry_cos_STR;
 

// Do not initialize inputs!
void _FUNC_CALL_ MBS_N_Phase_symmetry_cos_Init(N_Phase_symmetry_cos_STR *v)
{

}

void _FUNC_CALL_ MBS_N_Phase_symmetry_cos_Exec(N_Phase_symmetry_cos_STR *v)
{
  v->Phase_A = *v->Phase;
  v->Phase_B = (*v->Phase + 4.1887902047863909846168578443727);
  v->Phase_C = (*v->Phase + 2.0943951023931954923084289221863);
  if (v->Phase_A > 6.283185307179586476925286766559)
  {
    v->Phase_A = v->Phase_A - 6.283185307179586476925286766559;
  }
  if (v->Phase_B > 6.283185307179586476925286766559)
  {
    v->Phase_B = v->Phase_B - 6.283185307179586476925286766559;
  }
  if (v->Phase_C > 6.283185307179586476925286766559)
  {
    v->Phase_C = v->Phase_C - 6.283185307179586476925286766559;
  }
  v->Phase_A = cos(v->Phase_A) * *v->k;
  v->Phase_B = cos(v->Phase_B) * *v->k;
  v->Phase_C = cos(v->Phase_C) * *v->k;
}


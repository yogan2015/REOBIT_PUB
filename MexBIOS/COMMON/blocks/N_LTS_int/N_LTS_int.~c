 
#ifdef __BORLANDC__
#define _FUNC_CALL_  __stdcall
#else
#ifndef _FUNC_CALL_
#define _FUNC_CALL_  
#endif
#endif
 
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <float.h>
#include "IQmathLib.h"
#include "chip.h"
 
#include "kernel.h"
extern struct MBS_KERNEL Kernel;
#define MBS_getData(Addr)                      MBS_getGlobalData(&Kernel, Addr)
#define MBS_setData(Addr, Data, Flag)          MBS_setGlobalData(&Kernel, Addr, Data, Flag)
#define MBS_getPjtData(Addr, Len)              MBS_getProjectData(&Kernel, Addr, Len)
#define MBS_setPjtData(Addr, Data, Flag, Len)  MBS_setProjectData(&Kernel, Addr, Data, Flag, Len)
#define MBS_getMemSt()                         MBS_getMemStatus(&Kernel)
 
extern float SimulationTime;
 
#ifndef M_PI
#define M_PI    3.14159265358979323846
#endif
 
typedef struct _N_LTS_int_STR {
  float  *AB;
  float  *BC;
  float  *T;
  float   A1cos;
  float   A1sin;
  float   A2cos;
  float   A2sin;
  float   Td;
  float   Asin;
  float   Bsin;
  float   Csin;
} N_LTS_int_STR;
 

// Do not initialize inputs!
void _FUNC_CALL_ MBS_N_LTS_int_Init(N_LTS_int_STR *v)
{

}

void _FUNC_CALL_ MBS_N_LTS_int_Exec(N_LTS_int_STR *v)
{
  float Acos, Bcos, Ccos;
  // Линейные составляющие в фазные
  Acos = (-0.3333) * (2 * *v->AB + *v->BC);
  Bcos = (0.3333) * (*v->AB - *v->BC);
  Ccos = (0.3333) * (*v->AB + 2 * *v->BC);

  // Восстановление векторов из проекций
    // A
    v->Asin = v->Asin + Acos * v->Td * *v->T;
    // B
    v->Bsin = v->Asin + Acos * v->Td * *v->T;
    // C
    v->Csin = v->Asin + Acos * v->Td * *v->T;

  //Вычисление симметричных составляющих
  v->A1cos = (0.1666) * (2 * Acos - Bcos - Ccos - 1.732 * v->Bsin + 1.732 * v->Csin);
  v->A1sin = (0.1666) * (2 * v->Asin - v->Bsin - v->Csin + 1.732 * Bcos - 1.732 * Ccos);
  v->A2cos = (0.1666) * (2 * Acos - Bcos - Ccos + 1.732 * v->Bsin - 1.732 * v->Csin);
  v->A2sin = (0.1666) * (2 * v->Asin - v->Bsin - v->Csin - 1.732 * Bcos + 1.732 * Ccos);
}


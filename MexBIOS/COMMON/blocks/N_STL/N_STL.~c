 
#ifdef __BORLANDC__
#define _FUNC_CALL_  __stdcall
#else
#ifndef _FUNC_CALL_
#define _FUNC_CALL_  
#endif
#endif
 
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <float.h>
#include "IQmathLib.h"
#include "chip.h"
 
#include "kernel.h"
extern struct MBS_KERNEL Kernel;
#define MBS_getData(Addr)                      MBS_getGlobalData(&Kernel, Addr)
#define MBS_setData(Addr, Data, Flag)          MBS_setGlobalData(&Kernel, Addr, Data, Flag)
#define MBS_getPjtData(Addr, Len)              MBS_getProjectData(&Kernel, Addr, Len)
#define MBS_setPjtData(Addr, Data, Flag, Len)  MBS_setProjectData(&Kernel, Addr, Data, Flag, Len)
#define MBS_getMemSt()                         MBS_getMemStatus(&Kernel)
 
extern float SimulationTime;
 
#ifndef M_PI
#define M_PI    3.14159265358979323846
#endif
 
typedef struct _N_STL_STR {
  float  *A1cos;
  float  *A1sin;
  float  *A2cos;
  float  *A2sin;
  float  *Kdir;
  float  *Krev;
  float   Acos;
  float   Asin;
  float   Bcos;
  float   Bsin;
  float   Ccos;
  float   Csin;
} N_STL_STR;
 

// Do not initialize inputs!
void _FUNC_CALL_ MBS_N_STL_Init(N_STL_STR *v)
{

}

void _FUNC_CALL_ MBS_N_STL_Exec(N_STL_STR *v)
{
  v->Acos = *v->Kdir * *v->A1cos + *v->Krev * *v->A2cos;    v->Asin = *v->Kdir * *v->A1sin + *v->Krev * *v->A2sin;
  v->Bcos = *v->Kdir*((*v->A1cos) * (-0.5) +   (*v->A1sin) * (0.866) )+*v->Krev*((*v->A2cos) * (-0.5) + (*v->A2sin) * (-0.866));
  v->Bsin = *v->Kdir*((*v->A1cos) * (-0.866) + (*v->A1sin) * (-0.5)  )+*v->Krev*((*v->A2cos) * (0.866) + (*v->A2sin) * (-0.5));
  v->Ccos = *v->Kdir*((*v->A1cos) * (-0.5) +   (*v->A1sin) * (-0.866))+*v->Krev*((*v->A2cos) * (-0.5) + (*v->A2sin) * (0.866));
  v->Csin = *v->Kdir*((*v->A1cos) * (0.866) +  (*v->A1sin) * (-0.5)  )+*v->Krev*((*v->A2cos) * (-0.866) + (*v->A2sin) * (-0.5));

}


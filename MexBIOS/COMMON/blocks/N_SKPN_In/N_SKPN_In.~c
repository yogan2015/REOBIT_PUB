 
#ifdef __BORLANDC__
#define _FUNC_CALL_  __stdcall
#else
#ifndef _FUNC_CALL_
#define _FUNC_CALL_  
#endif
#endif
 
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <float.h>
#include "IQmathLib.h"
#include "chip.h"
 
#include "kernel.h"
extern struct MBS_KERNEL Kernel;
#define MBS_getData(Addr)                      MBS_getGlobalData(&Kernel, Addr)
#define MBS_setData(Addr, Data, Flag)          MBS_setGlobalData(&Kernel, Addr, Data, Flag)
#define MBS_getPjtData(Addr, Len)              MBS_getProjectData(&Kernel, Addr, Len)
#define MBS_setPjtData(Addr, Data, Flag, Len)  MBS_setProjectData(&Kernel, Addr, Data, Flag, Len)
#define MBS_getMemSt()                         MBS_getMemStatus(&Kernel)
 
extern float SimulationTime;
 
#ifndef M_PI
#define M_PI    3.14159265358979323846
#endif
 
typedef struct _N_SKPN_In_STR {
  long   *vec;
  long   *rst;
  long    STAGE;
  long    st;
  float   Td;
  float   timer;
} N_SKPN_In_STR;
 

// Do not initialize inputs!
void _FUNC_CALL_ MBS_N_SKPN_In_Init(N_SKPN_In_STR *v)
{

}

void _FUNC_CALL_ MBS_N_SKPN_In_Exec(N_SKPN_In_STR *v)
{
  v->timer =  v->timer + v->Td;
  if (v->timer > 1) v->timer = 1;

  switch (v->st) {
    case 0:           // предзаряд
      if (*v->vec & (1 << 0)) {                //  разрешена работа системы переходов
      v->timer = 0;
      v->st = 1;}
      break;
    case 1:           // сброс HALTов
      if (v->timer > 0.005) {                  // таймер 5мс
      v->timer = 0;
      v->st = 2;}
      break;
    case 2:           // режим дозаряда
      if  (*v->vec & (1 << 5))  {    // КМ2 замкнут и сеть в порядке
        if (*v->vec & (1 << 1)) {
        v->timer = 0;
        v->st = 3;}}
      break;
    case 3:           // авто компенсация
      if (*v->vec & (1 << 4)) {                // признак перехода к разряду
      v->timer = 0;
      v->st = 4;}
      if (*v->vec & (1 << 3)) {                // перезаряд конденсаторов свыше 800 В
      v->timer = 0;
      v->st = 4;}
      break;
    case 4:           // переход на разряд
      if (v->timer > 0.01) {                  // таймер 10мс
      v->timer = 0;
      v->st = 5;}
      break;
    case 5:           // разряд
      if (*v->vec & (1 << 6)) {    // сеть в порядке и синхронна
        if (*v->vec & (1 << 5)) {
        v->timer = 0;
        v->st = 6;}}
      if (*v->vec & (1 << 2)) {               // разряд конденсаторов ниже 550 В
      v->timer = 0;
      v->st = 0;}
      break;
    case 6:           // переход к компенсации
      if (v->timer > 0.01) {                  // таймер 10мс
      v->timer = 0;
      v->st = 2;}
      break;
   }

   if (*v->rst) v->st = 0;


   v->STAGE = v->st;
}

